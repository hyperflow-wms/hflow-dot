#!/usr/bin/env node

var fs = require('fs'),
    docopt = require('docopt').docopt;

var doc = "\
hflow-info: print information about a workflow\n\
Usage:\n\
  hflow-info <workflow.json path> [--print] [-p <metis_partition_file>] [-f <file_dir>]\n\
  hflow-info -h|--help\n\
  \
Options:\n\
  -h --help                    Prints this\n\
  --print                      Print output workflow json (to stderr)\n\
  -p <partition_file>          Add partitioning info based on partitioning file generated by metis\n\
  -f <file_dir>                Add information about worklow files which are stored in <file_dir>";

var opts = docopt(doc);

var sn = opts['--sn']; 

var file = opts['<workflow.json path>'];
var partFile = opts['-p'];
var fileDir = opts['-f'];

console.log(partFile, fileDir);

var fileContents = fs.readFileSync(file);

var wf = JSON.parse(fileContents);

var partmap;
if (partFile) {
  try {
    let partfilecontent = fs.readFileSync(partFile, 'utf8');
    partmap = partfilecontent.split("\n");
  } catch(err) {
     console.log("Error reading partition file", err);
  }
}

wfinfo = require('./wfinfo.js')(wf, partmap, fileDir);

var procNames = {}; 

wf.processes.forEach(function(proc, idx) {
  procNames[proc.name]=(procNames[proc.name] || 0)+1;
});

if (opts['--print']) {
  console.error(JSON.stringify(wfinfo.wfjson, null, 2));
}

console.log("workflow:", wf.name);
console.log("processes:", wf.processes.length);
Object.keys(procNames).forEach(p => (console.log("  " + p + ": " + procNames[p])));
console.log("signals:", wf.signals.length);
console.log("levels:", wfinfo.nLevels, "[" + wfinfo.levelCounts + "]");
if (wfinfo.partitioningPerPhase) {
  console.log("partitioning (per graph level):", wfinfo.partitioningPerPhase);
}
